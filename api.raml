#%RAML 1.0
title: Jobs
version: v1
baseUri: http://localhost:8000/api/
mediaType: application/json


securitySchemes:
  basic: !include ./securitySchemes/basic.raml
  token: !include ./securitySchemes/token.raml


types:
  Email: !include types/Email.raml
  Country: !include types/Country.raml
  City: !include types/City.raml
  Tag: !include types/Tag.raml
  PlainCategory: !include types/PlainCategory.raml
  Category: !include types/Category.raml
  Location: !include types/Location.raml
  Vacancy: !include types/Vacancy.raml
  CreateVacancy: !include types/CreateVacancy.raml
  User: !include types/User.raml
  CreateUser: !include types/CreateUser.raml
  UpdateUser: !include types/UpdateUser.raml


resourceTypes:
  list: !include resourceTypes/list.raml


/countries:
  type: list
  get:
    queryParameters:
      lang?:
        description: |
          Language code for filtering `alt_names`. If a parameter is specified,
          then the search is performed by alternative names in the corresponding language
        type: string
        example: en
      search?:
        description: Search string
        type: string
  /{id}:
    get:
      queryParameters:
        lang?:
          description: |
            Language code for filtering `alt_names`.
          type: string
          example: en

/cities:
  type: list
  get:
    queryParameters:
      lang?:
        description: |
          Language code for filtering `alt_names`. If a parameter is specified,
          then the search is performed by alternative names in the corresponding language
        type: string
        example: en
      country?:
        description: Country name for filtering
        type: string
      search?:
        description: Search string
        type: string
  /{id}:
    get:
      queryParameters:
        lang?:
          description: |
            Language code for filtering `alt_names`.
          type: string
          example: en

/vacancies:
  type: list
  post:
    securedBy: [ basic, token ]
    body:
      type: CreateVacancy
  /{id}:
    get:
  /tags:
    type: list
  /categories:
    type: list

/users:
  type: list
  post:
    body:
      type: CreateUser
  /{id}:
    get:
    put:
      body:
        type: UpdateUser

/account:
  description: Authorization, authentication, account management
  /login:
    post:
      description: Authenticates user with credentials
      body:
        properties:
          email: Email
          password: string
        example:
          email: python_developer@example.com
          password: dev12345678
      responses:
        200:
          description: User authenticated
          body:
            properties:
              auth_token: string
            example:
              auth_token: 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b
        400:
          description: Invalid credentials or user account is inactive
  /logout:
    post:
      description: Logging out of current user
      securedBy: [ basic, token ]
      responses:
        204:
          description: Logging out of current user
  /activate:
    post:
      description: Activates user account
      body:
        properties:
          uid: string
          token: string
        example:
          uid: MTAwMDA
          token: 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b
      responses:
        204:
          description: Activates user account
        400:
          description: UID/token pair is invalid or user already activated
  /password:
    post:
      description: Changes current user password
      securedBy: [ basic, token ]
      body:
        properties:
          current_password: string
          new_password: string
          new_password2: string
        example:
          current_password: dev12345678
          new_password: dev87654321
          new_password2: dev87654321
      responses:
        204:
          description: Changes current user password
        400:
          description: New password mismatch
        403:
          description: Current password is invalid
    /reset:
      post:
        description: Sends password reset link to user's email
        body:
          properties:
            email: Email
        responses:
          204:
            description: Sends password reset link to user's email
          400:
            description: User with this email is not found
      /confirm:
        description: Not implemented yet
  /authtoken:
    /validate:
      post:
        description: Checks authentication token validation
        body:
          properties:
            auth_token: string
          example:
            auth_token: 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b
        responses:
          200:
            description: Token is valid, returns user info
            body:
              properties:
                auth_token:
                  type: string
                  example: 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b
                user: User
          400:
            description: Invalid token
