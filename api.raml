#%RAML 1.0
title: Jobs
version: v1
baseUri: http://localhost:8000/api/

securitySchemes:
  basic: !include ./securitySchemes/basic.raml
  token: !include ./securitySchemes/token.raml

types:
  EmailAddress:
    type: string
    pattern: (?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])
    example: example@example.com

  Location:
    type: object
    properties:
      country:
        required: true
        type: string
      city:
        required: true
        type: string
    example:
      country: Russian Federation
      city: Moscow

  Category:
      type: object
      properties:
        id: integer
        title:
          type: string
          maxLength: 128
      example:
        id: 2
        title: "Developer"

  CategoryWithParent:
    type: object
    properties:
      id: integer
      title:
        type: string
        maxLength: 128
      parent: integer
    example:
      id: 2
      title: Developer
      parent: 1

  Vacancy:
    type: object
    properties:
      title:
        required: true
        type: string
        maxLength: 128
      description:
        required: true
        type: string
        maxLength: 1000
      salary_min:
        required: false
        type: integer
        minimum: 0
      salary_max:
        required: false
        type: integer
        minimum: 0
      location?: Location
      busyness?: integer
      remote_work?: boolean
      keywords:
        required: false
        type: string[]
        uniqueItems: true
      category?: integer
    example:
      title: Python/Django backend developer
      description: We need you!!
      salary_min: 100500
      salary_max: 100500
      location:
        country: Russian Federation
        city: Moscow
      busyness: 0
      remote_work: true
      keywords: ["python", "django", "high load"]
      category: 2

  VacancyRetrieve:
    type: object
    properties:
      title:
        required: true
        type: string
        maxLength: 128
      description:
        required: true
        type: string
        maxLength: 1000
      salary_min:
        required: false
        type: integer
        minimum: 0
      salary_max:
        required: false
        type: integer
        minimum: 0
      location?: Location
      busyness?: integer
      remote_work?: boolean
      keywords:
        required: false
        type: string[]
        uniqueItems: true
      category: Category[]
      created_on: datetime
      modified_on: datetime
    example:
      title: Python/Django backend developer
      description: We need you!!
      salary_min: 100500
      salary_max: 100500
      category:
        -
          id: 2
          title: Developer
        -
          id: 1
          title: IT
      location:
        country: Russian Federation
        city: Moscow
      busyness: 0
      remote_work: true
      keywords: ["python", "django", "high load"]
      created_on: 2016-02-28T16:41:41.090Z
      modified_on: 2016-02-28T16:41:41.090Z

  User:
    type: object
    properties:
      email: EmailAddress
      password: string
      name:
        type: string
        maxLength: 50
    example:
      email: python_developer@example.com
      password: dev12345678
      name: Jon Doe

  UserInfo:
    type: object
    properties:
      id: integer
      email: EmailAddress
      name:
        type: string
        maxLength: 50
    example:
      id: 1
      email: python_developer@example.com
      name: Jon Doe

/vacancies:
  description: Managing the list of vacancies
  get:
    description: Returns list of actual vacancies
    responses:
      200:
        description: Returns list of actual vacancies
        body:
          application/json:
            type: VacancyRetrieve[]
            example:
              -
                title: Python/Django backend developer
                description: We need you!!
                salary_min: 100500
                salary_max: 100500
                category:
                  -
                    id: 2
                    title: Developer
                  -
                    id: 1
                    title: IT
                location:
                  country: Russian Federation
                  city: Moscow
                busyness: 0
                remote_work: true
                keywords: ["python", "django", "high load"]
                created_on: 2016-02-28T16:41:41.090Z
                modified_on: 2016-02-28T16:41:41.090Z
              -
                title: JavaScript frontend developer
                description: We need you!!
                salary_min: 100500
                salary_max: 100500
                category:
                  -
                    id: 2
                    title: Developer
                  -
                    id: 1
                    title: IT
                location:
                  country: Russian Federation
                  city: Moscow
                busyness: 0
                remote_work: true
                keywords: ["javascript", "frontend", "high load"]
                created_on: 2016-02-28T16:41:41.090Z
                modified_on: 2016-02-28T16:41:41.090Z
  post:
    description: Creates new vacancy
    securedBy: [ basic, token ]
    body:
      application/json:
        type: Vacancy
    responses:
      201:
        description: Created new vacancy
        body:
          application/json:
            type: VacancyRetrieve
  /{id}:
    get:
      description: Returns vacancy with {id}
      responses:
        200:
          description: Returns requested vacancy
          body:
            application/json:
              type: VacancyRetrieve
        404:
          description: Requested vacancy not found
  /tags:
    description: Items in `keywords` field of the vacancy
    get:
      description: Returns list of available keywords for vacancies
      responses:
        200:
          description: Returns list of available keywords for vacancies
          body:
            application/json:
              type: string[]
              example:
                -
                  python
                -
                  django
  /categories:
    description: Options for the field `category` vacancies
    get:
      description: Returns list of available categories for vacancies
      responses:
        200:
          description: Returns list of available categories for vacancies
          body:
            application/json:
              type: CategoryWithParent[]
              example:
                -
                  id: 1
                  parent: null
                  title: IT
                -
                  id: 2
                  parent: 1
                  title: Developer


/users:
  description: Managing the list of users
  get:
    description: Returns list of users
    responses:
      200:
        description: Return list of registered users
        body:
          application/json:
            type: User[]
  post:
    description: Creates new user
    body:
      application/json:
        type: User
    responses:
      201:
        description: Created new user
        body:
          application/json:
            type: User
  /{id}:
    get:
      description: Returns user with {id}
      responses:
        200:
          description: Returns requested user
          body:
            application/json:
              type: User
        404:
          description: Requested user not found
    put:
      description: Updates user data with {id}
      body:
        application/json:
          type: User
      responses:
        200:
          description: Updates user
          body:
            application/json:
              type: User
        404:
          description: Unable to update user


/account:
  description: Authorization, authentication, account management
  /login:
    post:
      description: Authenticates user with credentials
      body:
        application/json:
          properties:
            email: EmailAddress
            password: string
          example:
            email: python_developer@example.com
            password: dev12345678
      responses:
        200:
          description: User authenticated
          body:
            application/json:
              properties:
                auth_token: string
              example:
                auth_token: 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b
        400:
          description: Invalid credentials or user account is inactive
  /logout:
    post:
      description: Logging out of current user
      securedBy: [ basic, token ]
      responses:
        204:
          description: Logging out of current user
  /activate:
    post:
      description: Activates user account
      body:
        application/json:
          properties:
            uid: string
            token: string
          example:
            uid: MTAwMDA
            token: 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b
      responses:
        204:
          description: Activates user account
        400:
          description: UID/token pair is invalid or user already activated
  /password:
    post:
      description: Changes current user password
      securedBy: [ basic, token ]
      body:
        application/json:
          properties:
            current_password: string
            new_password: string
            new_password2: string
          example:
            current_password: dev12345678
            new_password: dev87654321
            new_password2: dev87654321
      responses:
        204:
          description: Changes current user password
        400:
          description: New password mismatch
        403:
          description: Current password is invalid
    /reset:
      post:
        description: Sends password reset link to user's email
        body:
          application/json:
            properties:
              email: EmailAddress
        responses:
          204:
            description: Sends password reset link to user's email
          400:
            description: User with this email is not found
      /confirm:
        description: Not implemented yet
  /authtoken:
    /validate:
      post:
        description: Checks authentication token validation
        body:
          application/json:
            properties:
              auth_token: string
            example:
              auth_token: 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b
        responses:
          200:
            description: Token is valid, returns user info
            body:
              application/json:
                properties:
                  auth_token:
                    type: string
                    example: 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b
                  user: UserInfo
          400:
            description: Invalid token
